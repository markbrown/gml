<project name="Gml" default="all" basedir=".">
  <description> GML build file for program and tutorial </description>

  <!-- scala.home must be set in the build.properties file -->
  <property file="build.properties"/>

  <!-- source locations -->
  <property name="src.dir"      value="src"/>
  <property name="docsrc.dir"   value="doc/src"/>
  <property name="examples.dir" value="examples"/>

  <!-- base name of documentation files -->
  <property name="doc.name"     value="gml-scala-example"/>

  <!-- build directories -->
  <property name="build.dir"    value="build"/>
  <property name="classes.dir"  value="${build.dir}/classes"/>
  <property name="html.dir"     value="${build.dir}/doc/html"/>
  <property name="pdf.dir"      value="${build.dir}/doc/pdf"/>

  <!-- set up Scala compilation -->
  <target name="init">
    <property
      name="scala-library.jar"
      value="${scala.home}/lib/scala-library.jar"
    />

    <path id="build.classpath">
      <pathelement location="${scala-library.jar}"/>
      <pathelement location="${classes.dir}"/>
    </path>

    <taskdef resource="scala/tools/ant/antlib.xml">
      <classpath>
        <pathelement location="${scala.home}/lib/scala-compiler.jar"/>
        <pathelement location="${scala-library.jar}"/>
      </classpath>
    </taskdef>
  </target>

  <!-- compile Scala code -->
  <target name="compile"
          description="compile sources"
          depends="init">
    <mkdir dir="${classes.dir}"/>
    <scalac srcdir="${src.dir}"
            destdir="${classes.dir}"
            classpathref="build.classpath">
    </scalac>
  </target>

  <!-- build pdf -->
  <target name="pdf"
          description="build pdf documentation">
    <antcall target="pdf-once"/>
    <antcall target="pdf-once"/>
    <antcall target="pdf-once"/>
    <mkdir dir="${pdf.dir}"/>
    <copy file="${docsrc.dir}/${doc.name}.pdf"
          todir="${pdf.dir}"/>
  </target>

  <target name="pdf-once">
    <exec executable="pdflatex"
          dir="${docsrc.dir}">
      <arg value="${doc.name}.tex"/>
    </exec>
  </target>

  <!-- build html -->
  <target name="html"
          description="build html documentation"
          depends="html-single">
    <exec executable="hacha"
          dir="${html.dir}">
      <arg value="-tocbis"/>
      <arg value="${doc.name}.html"/>
    </exec>
  </target>

  <target name="html-single"
          description="build single-page html documentation">
    <exec executable="hevea"
          dir="${docsrc.dir}">
      <arg value="-fix"/>
      <arg value="-o"/>
      <arg value="${doc.name}.html"/>
      <arg value="${doc.name}-hevea.tex"/>
    </exec>
    <mkdir dir="${html.dir}"/>
    <copy file="${docsrc.dir}/${doc.name}.html"
          todir="${html.dir}"/>
  </target>

  <!-- run examples -->
  <target name="run"
          description="run examples to produce PPM files"
          depends="compile">
    <apply executable="scala"
           dir="${examples.dir}">
      <arg value="-cp"/>
      <arg value="${basedir}/${classes.dir}"/>
      <arg value="compiler.Main"/>
      <fileset dir="${examples.dir}">
        <include name="*.gml"/>
      </fileset>
    </apply>
  </target>

  <!-- cleaning -->
  <target name="clean"
          description="delete generated files"
          depends="clean-latex,clean-examples">
    <delete dir="${build.dir}"/>
  </target>

  <target name="clean-latex"
          description="delete files generated by latex">
    <delete>
      <fileset dir="${docsrc.dir}">
        <exclude name="*.tex"/>
      </fileset>
    </delete>
  </target>

  <target name="clean-examples"
          description="delete the generated example images">
    <delete>
      <fileset dir="${examples.dir}">
        <include name="*.ppm"/>
      </fileset>
    </delete>
  </target>

  <!-- high-level targets -->
  <target name="doc"
          description="build documentation"
          depends="html,pdf"/>

  <target name="all"
          description="build everything"
          depends="compile,doc"/>

  <target name="rebuild"
          description="rebuild all sources"
          depends="clean,all"/>
</project>

