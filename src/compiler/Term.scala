// Copyright (C) 2010 Mark Brown.  See the file LICENSE for details.

package compiler

import collection.mutable.{HashMap, HashSet}

sealed abstract class Term {
  // Should we enter the frame before this term?
  var enterFrame = false

  // Should we leave the frame after this term?
  var leaveFrame = false
}

case class FunctionTerm(body: Array[Term]) extends Term {
  // Nonlocal slots.
  var nonlocals: Array[String] = null
  val nonlocalMap = new HashMap[String, Int]

  // Locals from the parent that are referenced here.
  val parentLocals = new HashSet[String]

  // Are nonlocals from the parent referenced here?
  var hasParentNonlocals = false

  // Parent locals to free after the closure is built.
  var localsToFree: List[String] = Nil

  // Where to find nonlocal bindings in the parent.
  var locations: Array[Location] = null

  // Number of frame slots required.
  var frameSize = -1

  // Address of function in generated bytecode.
  var address = -1
}

case class ArrayCtor(body: Array[Term]) extends Term

case class IntLiteral(n: Int) extends Term

case class RealLiteral(d: Double) extends Term

case class StringLiteral(s: String) extends Term

case class Operator(name: String) extends Term

case class Identifier(name: String) extends Term {
  // Is the variable bound locally?
  var isLocal = false

  // Should we free the local after pushing?
  var freeLocal = false

  // Where is the binding stored?
  var location: Location = null
}

case class Binder(name: String) extends Term {
  // True if there are no references to the right.
  var isUnused = false

  // Which frame slot is the value stored in?
  var frameSlot = -1
}

case object Render extends Term

case class Call(callType: CallType.Value) extends Term {
  // Is this the last term in a function body?
  var isTailCall = false

  // Should we save returnPointer before this call?
  var saveReturnPointer = false

  // Should we restore returnPointer after this call?
  var restoreReturnPointer = false

  // Should we save currentContext before this call?
  var saveCurrentContext = false

  // Should we restore currentContext after this call?
  var restoreCurrentContext = false

  // Should we free the currentContext slot after this call?
  var freeCurrentContext = false

  // In which frame slots are the registers stored?
  var returnPointerSlot = -1
  var currentContextSlot = -1
}

object CallType extends Enumeration { val Apply, If = Value }
